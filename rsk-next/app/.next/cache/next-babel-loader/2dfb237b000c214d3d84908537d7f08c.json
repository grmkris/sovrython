{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/kristjan/git/rsk-next/app/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../static/styles/index-styles';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState, useEffect } from 'react';\nimport { web3Mainnet, web3Testnet, getSimpleStorageValue } from '../utils/web3-util';\n\nfunction Index(props) {\n  var _this = this;\n\n  var UpdateButton = function UpdateButton() {\n    return __jsx(Button, {\n      variant: \"success\",\n      onClick: function onClick() {\n        return updateNetworkData();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }\n    }, \"Update\");\n  };\n\n  var _useState = useState(1),\n      mainnetBlock = _useState[0],\n      setMainnetBlock = _useState[1];\n\n  var _useState2 = useState(1),\n      testnetBlock = _useState2[0],\n      setTestnetBlock = _useState2[1];\n\n  var _useState3 = useState(1),\n      simpleStorageValue = _useState3[0],\n      setSimpleStorageValue = _useState3[1];\n\n  var _useState4 = useState(__jsx(UpdateButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 58\n    }\n  })),\n      updateComponent = _useState4[0],\n      setUpdateComponent = _useState4[1];\n\n  var _useState5 = useState(true),\n      bestBlockLoading = _useState5[0],\n      setBestBlockLoading = _useState5[1];\n\n  useEffect(function () {\n    var initNetworkData = function initNetworkData() {\n      var mainnetBestBlock, testnetBestBlock, networkSimpleStorageValue;\n      return _regeneratorRuntime.async(function initNetworkData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3Mainnet.eth.getBlockNumber());\n\n            case 2:\n              mainnetBestBlock = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(web3Testnet.eth.getBlockNumber());\n\n            case 5:\n              testnetBestBlock = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(getSimpleStorageValue());\n\n            case 8:\n              networkSimpleStorageValue = _context.sent;\n              setSimpleStorageValue(networkSimpleStorageValue.toNumber());\n              setMainnetBlock(mainnetBestBlock);\n              setTestnetBlock(testnetBestBlock);\n              setBestBlockLoading(false);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    initNetworkData();\n  }, []);\n\n  function updateNetworkData() {\n    return _regeneratorRuntime.async(function updateNetworkData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setUpdateComponent(__jsx(Spinner, {\n              animation: \"border\",\n              variant: \"success\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 24\n              }\n            }));\n            _context2.t0 = setMainnetBlock;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(web3Mainnet.eth.getBlockNumber());\n\n          case 4:\n            _context2.t1 = _context2.sent;\n            (0, _context2.t0)(_context2.t1);\n            _context2.t2 = setTestnetBlock;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(web3Testnet.eth.getBlockNumber());\n\n          case 9:\n            _context2.t3 = _context2.sent;\n            (0, _context2.t2)(_context2.t3);\n            _context2.t4 = setSimpleStorageValue;\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(getSimpleStorageValue());\n\n          case 14:\n            _context2.t5 = _context2.sent.toNumber();\n            (0, _context2.t4)(_context2.t5);\n            setUpdateComponent(__jsx(UpdateButton, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 24\n              }\n            }));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, null, Promise);\n  }\n\n  var NetworkData = function NetworkData(props) {\n    return __jsx(React.Fragment, null, !props.loading ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, \"Mainnet best block \", props.mainnetBlock), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }), __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, \"Testnet best block \", props.testnetBlock), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }), __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, \"Simple Storage Value \", props.simpleStorageValue)) : __jsx(Spinner, {\n      animation: \"border\",\n      variant: \"success\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, styles, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    className: \"rsk-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), __jsx(\"h1\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Welcome To RSK + Next JS Truffle Box\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(NetworkData, {\n    mainnetBlock: mainnetBlock,\n    testnetBlock: testnetBlock,\n    simpleStorageValue: simpleStorageValue,\n    loading: bestBlockLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), updateComponent));\n}\n\nexport default Index;","map":{"version":3,"sources":["/home/kristjan/git/rsk-next/app/pages/index.js"],"names":["styles","Button","Form","Spinner","useState","useEffect","web3Mainnet","web3Testnet","getSimpleStorageValue","Index","props","UpdateButton","updateNetworkData","mainnetBlock","setMainnetBlock","testnetBlock","setTestnetBlock","simpleStorageValue","setSimpleStorageValue","updateComponent","setUpdateComponent","bestBlockLoading","setBestBlockLoading","initNetworkData","eth","getBlockNumber","mainnetBestBlock","testnetBestBlock","networkSimpleStorageValue","toNumber","NetworkData","loading"],"mappings":"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","sourcesContent":["import styles from '../static/styles/index-styles';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState, useEffect } from 'react';\nimport { web3Mainnet, web3Testnet, getSimpleStorageValue} from '../utils/web3-util';\n\nfunction Index(props) {\n  const UpdateButton = () => (\n    <Button variant=\"success\" onClick={() => updateNetworkData()}>\n      Update\n    </Button>\n  );\n\n  const [mainnetBlock, setMainnetBlock] = useState(1);\n  const [testnetBlock, setTestnetBlock] = useState(1);\n  const [simpleStorageValue, setSimpleStorageValue] = useState(1);\n  \n  const [updateComponent, setUpdateComponent] = useState(<UpdateButton />);\n  const [bestBlockLoading, setBestBlockLoading] = useState(true);\n\n  useEffect(() => {\n    const initNetworkData = async () => {\n      const mainnetBestBlock = await web3Mainnet.eth.getBlockNumber();\n      const testnetBestBlock = await web3Testnet.eth.getBlockNumber();\n      const networkSimpleStorageValue = await getSimpleStorageValue();\n      setSimpleStorageValue(networkSimpleStorageValue.toNumber());      \n      setMainnetBlock(mainnetBestBlock);\n      setTestnetBlock(testnetBestBlock);\n      setBestBlockLoading(false);\n    }\n    initNetworkData()\n  }, []);\n\n  async function updateNetworkData() {\n    setUpdateComponent(<Spinner animation=\"border\" variant=\"success\" />);\n    setMainnetBlock(await web3Mainnet.eth.getBlockNumber());\n    setTestnetBlock(await web3Testnet.eth.getBlockNumber());\n    setSimpleStorageValue((await getSimpleStorageValue()).toNumber());\n    setUpdateComponent(<UpdateButton />);\n  }\n\n  const NetworkData = props => {\n    return (\n      <>\n        {!props.loading ? (\n          <div>\n            <h4>Mainnet best block {props.mainnetBlock}</h4>\n            <br />\n            <h4>Testnet best block {props.testnetBlock}</h4>\n            <br />\n            <h4>Simple Storage Value {props.simpleStorageValue}</h4>\n          </div>\n        ) : (\n          <Spinner animation=\"border\" variant=\"success\" />\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"body\">\n      {styles}\n      <div>\n        <img className=\"rsk-logo\" />\n      </div>\n      <h1 className=\"header\">Welcome To RSK + Next JS Truffle Box</h1>\n      <br />\n      <Form>\n        <Form.Group>\n          <NetworkData\n            mainnetBlock={mainnetBlock}\n            testnetBlock={testnetBlock}\n            simpleStorageValue={simpleStorageValue}\n            loading={bestBlockLoading}\n          />\n        </Form.Group>\n        <br />\n        {updateComponent}\n      </Form>\n    </div>\n  );\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}