{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar Web3 = require('web3');\n\nvar SimpleStorageContract = require('../contracts/SimpleStorage.json');\n\nexport var web3Mainnet = new Web3(new Web3.providers.HttpProvider('https://public-node.rsk.co'));\nexport var web3Testnet = new Web3(new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co'));\nexport function getSimpleStorageValue() {\n  var provider, web3, networkId, deployedNetwork, contractInstance;\n  return _regeneratorRuntime.async(function getSimpleStorageValue$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // To connect to RSK network update line 15 for one of the following providers:\n          // const provider = new Web3.providers.HttpProvider(\"https://public-node.testnet.rsk.co\");\n          // const provider = new Web3.providers.HttpProvider(\"https://public-node.rsk.co\");\n          provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n          web3 = new Web3(provider);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(web3.eth.net.getId());\n\n        case 4:\n          networkId = _context.sent;\n          deployedNetwork = SimpleStorageContract.networks[networkId];\n          contractInstance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address);\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(contractInstance.methods.get().call());\n\n        case 9:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/kristjan/git/rsk-next/app/utils/web3-util.js"],"names":["Web3","require","SimpleStorageContract","web3Mainnet","providers","HttpProvider","web3Testnet","getSimpleStorageValue","provider","web3","eth","net","getId","networkId","deployedNetwork","networks","contractInstance","Contract","abi","address","methods","get","call"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,iCAAD,CAArC;;AAEA,OAAO,IAAIE,WAAW,GAAG,IAAIH,IAAJ,CACvB,IAAIA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgC,4BAAhC,CADuB,CAAlB;AAGP,OAAO,IAAIC,WAAW,GAAG,IAAIN,IAAJ,CACvB,IAAIA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgC,oCAAhC,CADuB,CAAlB;AAGP,OAAO,SAAeE,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AAEMC,UAAAA,QALD,GAKY,IAAIR,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CALZ;AAOCI,UAAAA,IAPD,GAOQ,IAAIT,IAAJ,CAASQ,QAAT,CAPR;AAAA;AAAA,2CAQmBC,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,KAAb,EARnB;;AAAA;AAQCC,UAAAA,SARD;AASCC,UAAAA,eATD,GASmBZ,qBAAqB,CAACa,QAAtB,CAA+BF,SAA/B,CATnB;AAUCG,UAAAA,gBAVD,GAUoB,IAAIP,IAAI,CAACC,GAAL,CAASO,QAAb,CACvBf,qBAAqB,CAACgB,GADC,EAEvBJ,eAAe,IAAIA,eAAe,CAACK,OAFZ,CAVpB;AAAA;AAAA,2CAcQH,gBAAgB,CAACI,OAAjB,CAAyBC,GAAzB,GAA+BC,IAA/B,EAdR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const Web3 = require('web3');\nconst SimpleStorageContract = require('../contracts/SimpleStorage.json');\n\nexport let web3Mainnet = new Web3(\n  new Web3.providers.HttpProvider('https://public-node.rsk.co'),\n);\nexport let web3Testnet = new Web3(\n  new Web3.providers.HttpProvider('https://public-node.testnet.rsk.co'),\n);\nexport async function getSimpleStorageValue() {\n  // To connect to RSK network update line 15 for one of the following providers:\n  // const provider = new Web3.providers.HttpProvider(\"https://public-node.testnet.rsk.co\");\n  // const provider = new Web3.providers.HttpProvider(\"https://public-node.rsk.co\");\n\n  const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\")\n  \n  const web3 = new Web3(provider);\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = SimpleStorageContract.networks[networkId];\n  const contractInstance = new web3.eth.Contract(\n    SimpleStorageContract.abi,\n    deployedNetwork && deployedNetwork.address);\n\n  return await contractInstance.methods.get().call();\n} \n"]},"metadata":{},"sourceType":"module"}